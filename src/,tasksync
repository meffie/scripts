#!/usr/bin/python3

import configparser
import os
import pprint
import re
import sh
import ssl
import sys

try:
    import kanboard
except ImportError:
    sys.stderr.write('kanboard module not found.\n')
    os.sys.exit(1)

try:
    import taskw
except ImportError:
    sys.stderr.write('taskw module not found.\n')
    os.sys.exit(1)

# Monkey patch ssl module to work around our malformed cert.
# Fixes the error:
#     ssl.CertificateError: hostname 'kb.devlab.sinenomine.net' doesn't match u'debian-8-x64-02'
ssl.match_hostname = lambda cert, hostname: True
ssl._create_default_https_context = ssl._create_unverified_context

class Config(object):

    def __init__(self, filename='~/.kbrc'):
        self._filename = os.path.expanduser(filename)
        if not os.path.exists(self._filename):
            raise OSError(2, f'Config file not found: {self._filename}')
        self._config = configparser.ConfigParser()
        if len(self._config.read(self._filename)) != 1:
            raise OSError(2, f'Unable to read config file: {self._filename}')

    @property
    def host(self):
        return self._config.get('kanboard', 'host')

    @property
    def token(self):
        return self._config.get('kanboard', 'token')

    @property
    def url(self):
        return os.path.join(self.host, 'jsonrpc.php')

    @property
    def project_id(self):
        return int(self._config.get('sync', 'project'))

    @property
    def username(self):
        return self._config.get('sync', 'username')


class Task(object):

    tw = taskw.TaskWarrior()

    def __init__(self, data):
        self._data = data

    def __repr__(self) -> str:
        return pprint.pformat((self.kb, self.uuid, self.status))

    @classmethod
    def add(cls, card):
        """
        Create a new task from a kb card.
        """
        title = card.safe_title
        fields = {'kb': card.id}
        if card.reference:
            fields['ticket'] = int(card.reference)
        if card.project:
            fields['project'] = card.project
        if card.column:
            fields['tags'] = [card.column]
        data = cls.tw.task_add(title, **fields)
        task = Task(data)
        print(f'Added task {task.uuid} for card {task.kb}.')
        return task

    def update(self, card):
        """
        Update the task with the current card info.
        """
        if card.column not in self.tags:
            tags = [f'+{card.column}']
            tags.extend(map(lambda t: f'-{t}', self.tags & card.columns))
            sh.task(self.uuid, 'modify', *tags)
            tags = ' '.join(tags)
            print(f'Updated task {self.uuid} tags {tags}')
        if card.column.startswith('blocked') and self.status == 'pending':
            sh.task(self.uuid, 'modify', 'wait:eom')
            print(f'Updated task {self.uuid} wait')
        if card.reference and str(card.reference) != str(self.ticket):
            sh.task(self.uuid, 'modify', f'ticket:{card.reference}')
            print(f'Updated task {self.uuid} ticket {card.reference}')
        if self.description != card.safe_title:
            sh.task(self.uuid, 'modify', card.safe_title)
            print(f'Updated task {self.uuid} title {card.safe_title}')

    def done(self):
        self._data['status'] = 'completed'
        sh.task(self.uuid, 'done')
        print(f'Completed task {self.uuid} for card {self.kb}.')

    @property
    def status(self):
        return self._data['status'].lower()

    @property
    def description(self):
        return self._data['description']

    @property
    def kb(self):
        return int(self._data['kb'])

    @property
    def uuid(self):
        return self._data['uuid']

    @property
    def tags(self):
        return set(self._data.get('tags', None) or [])

    @property
    def project(self):
        return self._data.get('project', '')

    @property
    def ticket(self):
        return self._data.get('ticket', '')


class Card(object):

    columns = set(['todo', 'doing', 'done', 'blocked_internal', 'blocked_customer', 'blocked_upstream'])

    def __init__(self, data):
        self._data = data
        # Extract project name from card title.
        m = re.match(r'([a-zA-Z0-9-]+):\s+(.*)', data['title'])
        if m:
            project = m.group(1)
            title = m.group(2)
        else:
            project = ''
            title = data['title']
        self._title = title
        self._project = project

    def __repr__(self) -> str:
        return pprint.pformat((self.id, self.column))

    def create_task(self):
        print(f'create a task for card {self.id}')

    @property
    def full_title(self):
        return self._data['title']

    @property
    def title(self):
        return self._title

    @property
    def safe_title(self):
        """
        Filter out non-alphanumeric chars and keywords to avoid add failure.
        """
        title = re.sub(r'[^a-zA-Z0-9 \-.,:/]+', '', self.title)
        for kw in ('ticket', 'gerrit', 'kb'):
            title = title.replace(kw, f'[{kw}]')
        return title

    @property
    def project(self):
        return self._project

    @property
    def id(self):
        return int(self._data['id'])

    @property
    def reference(self):
        return self._data.get('reference', None)

    @property
    def swimlane(self):
        swimlane = self._data['swimlane_name'] or self._data['default_swimlane']
        return swimlane.replace(' ', '').lower()

    @property
    def column(self):
        return self._data['column_name'].replace(':', '').replace(' ', '_').lower()

def main():
    config = Config()
    kb = kanboard.Client(config.url, 'jsonrpc', config.token)

    tasks = {}
    for data in Task.tw.filter_tasks({'kb.isnt': ''}):
        task = Task(data)
        if task.kb in tasks:
            raise AssertionError(f'Duplicate task kb value {task.kb}.')
        tasks[task.kb] = task
    # pprint.pprint(Task.all)

    cards = {}
    query = f'status:open assignee:{config.username}'
    for data in kb.search_tasks(project_id=config.project_id, query=query):
        card = Card(data)
        if card.swimlane == "longterm":
            continue   # Skip backlog
        if card.column == "done":
            continue   # Card was moved to done column, but not closed yet.
        if card.id in cards:
            raise AssertionError(f'Duplicate card id value {card.id}.')
        cards[card.id] = card
    # pprint.pprint(cards)

    task_ids = set(tasks.keys())
    card_ids = set(cards.keys())

    # Cards without tasks.
    for id_ in card_ids - task_ids:
        Task.add(cards[id_])

    # Tasks without cards.
    for id_ in task_ids - card_ids:
        task = tasks[id_]
        if task.status == 'pending':
            task.done()

    # Instersection.
    for id_ in task_ids & card_ids:
        task = tasks[id_]
        card = cards[id_]
        task.update(card)


if __name__ == '__main__':
    main()
